class Ball 
{
	field int x,y;     			
	field int distlx, distly;     

	field int d, straightD, diagonalD;      		
	field boolean invert, px, py; 		

	field int leftWall, rightWall, topWall, bottomWall;    
	field int wall;										  

	constructor Ball new(int Ax, int Ay, int AleftWall, int ArightWall, int AtopWall, int AbottomWall) 
	{
		let x = Ax;
		let y = Ay;
		let leftWall = AleftWall;
		let rightWall = ArightWall - 6;  
		let topWall = AtopWall;
		let bottomWall = AbottomWall - 6;
		let wall = 0;                    
		do show();						
		return this;
	}

    method void destination(int destx, int desty) {
    	var int dx, dy, temp;
    	let distlx = destx - x;   
    	let distly = desty - y;		   
    	let dx = Math.abs(distlx);       
    	let dy = Math.abs(distly);
    	let invert = (dx < dy);             
    	
    	if (invert) 
		{                   
    		let temp = dx; 
    		let dx = dy;
    		let dy = temp;
    		let px = (y < desty);
    		let py = (x < destx);
    	}

    	else 
		{								
    		let px = (x < destx);
    		let py = (y < desty);
    	}

    	let d = (2 * dy) - dx;
    	let straightD = 2 * dy;
    	let diagonalD = 2 * (dy -dx);

    	return;

	 }

	method int move() 
	{
		do erase();

        if (d < 0) { let d = d + straightD; }
        else 
		{
            let d = d + diagonalD;

            if (py) {

                if (invert) { let x = x + 4; }
                else { let y = y + 4; }
            }
            else 
			{
                if (invert) { let x = x - 4; }
                else { let y = y - 4; }
            }
	    }

        if (px) 
		{
            if (invert) { let y = y + 4; }
            else { let x = x + 4; }
	    }
	    else 
		{
            if (invert) { let y = y - 4; }
            else { let x = x - 4; }
	    }

	    if (~(x > leftWall)) 
		{
	        let wall = 1;    
	        let x = leftWall;
	    }
        if (~(x < rightWall)) 
		{
	        let wall = 2;    
	        let x = rightWall;
	    }
        if (~(y > topWall)) 
		{
            let wall = 3;    
	        let y = topWall;
        }
        if (~(y < bottomWall)) 
		{
            let wall = 4;    
	        let y = bottomWall;
        }

	    do show();

	    return wall;
	}

	method void bounce(int bouncDir) 
	{
		var int newx, newy, divdistlx, divdistly, factor;

        let divdistlx = distlx / 10;
        let divdistly = distly / 10;
	    if (bouncDir = 0) {let factor = 10;}
	    else {
	        if (((~(distlx < 0)) & (bouncDir = 1)) | (( distlx < 0) & (bouncDir = (-1)))) 
			{ let factor = 20;}
	        else 
			{ let factor = 5; }
	    }

	    if (wall = 1) 
		{
	        let newx = 506;
	        let newy = ( divdistly * (-50)) / divdistlx;
            let newy = y + (newy * factor);
	    }
        else {
            if (wall = 2) 
			{
                let newx = 0;
                let newy = (divdistly * 50) / divdistlx;
                let newy = y + (newy * factor);
	        }
	        else {
                if (wall = 3) 
				{
		            let newy = 250;
		            let newx = ( divdistlx * (-25)) / divdistly;
                    let newx = x + (newx * factor);
		        }
                else { // assume wall = 4
		            let newy = 0;
		            let newx = (divdistlx * 25) / divdistly;
                    let newx = x + (newx * factor);
		        }
            }
        }

        do destination(newx, newy);
        return;
    }

    method void dispose() 
	{
        do Memory.deAlloc(this);
        return;
    }

    method void show() 
	{
    	do Screen.setColor(true);
    	do draw();
    	return;
    }

    method void erase() 
	{
    	do Screen.setColor(false);
    	do draw();
    	return;
    }

    method void draw() 
	{
    	do Screen.drawRectangle(x, y, x + 5, y + 5);
    	return;
    }

    method int getLeft() 
	{
        return x;
    }

    method int getRight() 
	{
        return x + 5;
    }
}

