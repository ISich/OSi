class PongGame 
{
	static PongGame try;
	field Bat bat;            
	field Ball ball;		 
	field int wall;		     
	field boolean exit;    
	field int score;		  
	field int lastWall;		
	field int batWidth;		  

	constructor PongGame new() 
    {
		do Screen.clearScreen();
		let batWidth = 45;
		let bat = Bat.new(230, 229, batWidth, 7);
		let ball = Ball.new(253, 222, 0, 511, 0, 229);
		do ball.destination(400,0);
		do Screen.drawRectangle(0,238, 511, 240);
		do Output.moveCursor(22,0);
		do Output.printString("Score: 0");

		let exit = false;
		let score = 0;
		let wall = 0;
		let lastWall = 0;
		return this;
	}

    method void run() 
    {
        var char key;

        while (~exit) 
        {
            while ((key = 0) & (~exit)) 
            {
                let key = Keyboard.keyPressed();
                do moveBall();
                do Sys.wait(50);
            }

            if (key = 130) { do bat.setDirection(1); }
	        else 
            {
	            if (key = 132) { do bat.setDirection(2); }
		        else 
                {
                    if (key = 140) { let exit = true; }
		        }
            }

            while ((~(key = 0)) & (~exit)) 
            {
                let key = Keyboard.keyPressed();
                do bat.move();
                do moveBall();
                do Sys.wait(50);
            }
        }

	    if (exit) 
        {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    } 
        return;
    }

    method void moveBall() 
    {
        var int bounDir, batL, batR, ballL, ballR;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) 
        {
            let lastWall = wall;
            let bounDir = 0;
            let batL = bat.getLeft();
            let batR = bat.getRight();
            let ballL = ball.getLeft();
            let ballR = ball.getRight();
  
            if (wall = 4) 
            {
                let exit = (batL > ballR) | (batR < ballL);
                if (~exit) 
                {
                    if (ballR < (batL + 10)) { let bounDir = -1; }
                    else 
                    {
                        if (ballL > (batR - 10)) { let bounDir = 1; }
                    }

                    let batWidth = batWidth - 1;
                    do bat.setWidth(batWidth);      
                    let score = score + 1;
                    do Output.moveCursor(22,7);
                    do Output.printInt(score);
                }
            }
            do ball.bounce(bounDir);
        }
        return;
    }

	method void dispose() 
    {
        do bat.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    function void newTry() 
    {
        let try = PongGame.new();
        return;
    }
    
    function PongGame getTry() 
    {
        return try;
    }
}